//
// Wunderground API Client for node.js
// Andrew Anderson
// twitter: @andrewandersons
//
// Changes made by lgriffin
// twitter: @leighgriffin


var request = require('request')
   util = require('util'),
   RateLimiter = require('limiter').RateLimiter,
// wunderground has pretty string API rates. limter provides a basic request throttler
// default rate limiting
   rateCount = 10,
   rateTime = 'minute',
   limiter = new RateLimiter(rateCount, rateTime),
   sleep = require('sleep'),
   redis = require('redis'),
   Throttle = require('redis-throttle');

var minuteThrottle, hourThrotle, dayThrottle;
var minuteKey = "wunder:limit:minute";
var hourKey = "wunder:limit:hour";
var dayKey = "wunder:limit:day";

Throttle.configure({
  port: 6379,
  host: 'localhost'
})


var wundernode = function(apikey, debug, rateMinute, rateHour, rateDay) {
      if (rateMinute || rateHour || rateDay) {
         /*
console.log('reseting rate : ' + rateCount + ' per ' + rateTime);
         limiter = new RateLimiter(rateCount, rateTime);
         
*/

         if (rateMinute) {
              minuteThrottle = new Throttle(minuteKey, {
              span: 1 * 60 * 1000, // 1 min
              accuracy: 1 * 1000   // 1 seconds
            })
             minuteThrottle.read(function(err, cnt) {
               console.log( new Date().toLocaleTimeString() + ': current minute limiter count:', cnt);
               count = cnt;
               if (err) throw err;

            });

         }
         if (rateHour) {
           hourThrottle = new Throttle(hourKey, {
           span: 60 * 60 * 1000, // 1 hour
           accuracy: 60 * 1000   // 60 seconds 
         });
            
         }
         if (rateDay) {
           dayThrottle = new Throttle(dayKey, {
           span: 24 * 60 * 60 * 1000, // 24 hours
           accuracy: 60 * 1000   // 60 seconds 
         });
            
         }
      
      }
     
     var that = this;
     var format = ".json";
     console.log ('WunderNodeClient initialized, apikey: ' + apikey + ', debug enbaled: ' + debug + ', rateCount: ' + rateCount + ', rateTime: '  + rateTime);
     
     var host = 'http://api.wunderground.com/api/' + apikey;

     if (debug) console.log('Host: ' + host);
     var get = function(callback, params, path) {
       var url = host + path;
       if (debug) console.log ('get: ' + url);
       
        if (minuteThrottle) {
           minuteThrottle.increment(1, function( err, count) {
              if (err) { 
                  console.error('Error hit somewhere, maybe count limit: ' + err);
              }
            
               function hangForThrottling(callback) {
                     sleep.sleep(5);
                     var that = this;

                     minuteThrottle.read(function(err, cnt) {     
                        that.console.log( new Date().toLocaleTimeString() + ': current minute limiter count:', cnt  + '/' + rateMinute);
                        if (cnt >= rateMinute) hangForThrottling(callback);
                        else callback(err,cnt);
                     });
               };
               
               
               
               
               while (count >= rateMinute) {
                     console.log(new Date().toLocaleTimeString() +': hanging this shit for throttling');
                     console.log(new Date().toLocaleTimeString() + ': minuteThrottle: cnt: ' + count + ', rate: ' + rateMinute);
                     count = hangForThrottling(function(err, cnt){
                        console.log('done hanging, setting count to: ' + cnt);
                        count = cnt;
                     });
               }                              
                 
                 
              
              
           });
        } 
        if (hourThrottle) {
           
        }
        if (dayThrottle) {
           
        }
       
       // Throttle requests
      limiter.removeTokens(1, function(err, callbacks) {
        // err will only be set if we request more than the maximum number of
        // requests we set in the constructor
      
        // remainingRequests tells us how many additional requests could be sent
        // right this moment      
        
        
        request(url, function (error, response, body) {
               if (!error && response.statusCode == 200) {
               if (debug) console.log('response body: ' + body);
                  callback(error, body);
               }
               else if (error) {
                          console.log('error: '  + err);
               }

       });
      });
       
       
       
     };
     
     that.getTokensRemaining = function() {
         return limiter.getTokensRemaining();
     };

     // autocomplete                     
     that.autocomplete = function(query, callback) {
          var path = "/autocomplete/q/" + query +  format;
          get(callback, null, path);
     };

     // Weather station lookups

        that.geolookup = function(query, callback) {
          var path = "/geolookup/q/" + query +  format;
          get(callback, null, path);
     };

     // Forecasts, current conditions and projected
     that.hourly7day = function(query, callback) {
          var path = "/hourly7day/q/" + query +  format;
          get(callback, null, path);
     };

     that.hourly10day = function(query, callback) {
          var path = "/hourly10day/q/" + query +  format;
          get(callback, null, path);
     };

     that.conditions = function(query, callback) {
          var path = "/conditions/q/" + query +  format;
          get(callback, null, path);
     };

     
     that.forecast = function(query, callback) {
       var path = "/forecast/q/" + query +  format;
       get(callback, null, path);
     };
     
     that.forecast10day = function(query, callback) {
       var path = "/forecast10day/q/" + query +  format;
       get(callback, null, path);
     };

     that.almanac = function(query, callback) {
       var path = "/almanac/q/" + query +  format;
       get(callback, null, path);
     };

     that.hourly = function(query, callback) {
       var path = "/hourly/q/" + query +  format;
       get(callback, null, path);
     };

     that.yesterday = function(query, callback) {
       var path = "/yesterday/q/" + query +  format;
       get(callback, null, path);
     };
             // Satellite Imagery

     that.satellite = function(query, callback) {
       var path = "/satellite/q/" + query +  format;
       get(callback, null, path);
     }
     
     that.planner = function(query, range, callback) {               
       var path = "/planner_" + range + "/q/" + query +  format;
       get(callback, null, path);
     }

     that.webcams = function(query, callback) {
        var path = "/webcams/q/" + query + format;
        get(callback, null, path);
     }
};

module.exports = wundernode;

        