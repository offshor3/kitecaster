{
  "name": "exec-plan",
  "version": "0.0.3",
  "author": {
    "name": "Ryan Self",
    "email": "stephen.ryan.self@gmail.com"
  },
  "descriptions": "Node.js module to provide sequenced execution of child commands",
  "contributors": [
    {
      "name": "Ryan Self",
      "email": "stephen.ryan.self@gmail.com"
    },
    {
      "name": "AJ Engwall"
    }
  ],
  "keywords": [
    "exec",
    "synchronous",
    "child process"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/ryan-self/exec-plan.git"
  },
  "engines": {
    "node": ">=0.6"
  },
  "devDependencies": {
    "nodeunit": ">=0.7.4",
    "sinon": ">=1.4.2"
  },
  "main": "./main",
  "scripts": {
    "test": "nodeunit test"
  },
  "readme": "exec-plan - Run child process commands synchronously\n====================================================\n\nDescription\n-----------\n\nProvide the ability to run child process commands synchronously, with some fine-grained control, all while avoiding the\ndreaded pyramid of doom (i.e., callback indentation) >.<\n\nEasy Install\n------------\n\n    $ sudo npm install exec-plan\n\nInstall with package.json setup\n-------------------------------\n\n````javascript\n/**\n * package.json example\n * package.json should be in the root of the project that will include 'exec-plan' as a dependency.\n * use this method of installing 'exec-plan' module to put it under the project's local directory.\n */\n{\n    \"name\": \"my personal project\",\n    \"version\": \"0.0.1\",\n    \"dependencies\": {\n        \"exec-plan\": \"0.0.3\"\n    }\n}\n````\n\n    $ sudo npm install\n- Note: this will install all dependencies for \"my personal project\" in \"node_modules\" folder\n        below the project's root directory\n\nExamples\n--------\n\n````javascript\n/**\n * An example of the most basic usage.\n */\n\nvar ExecPlan = require('exec-plan').ExecPlan;\nvar execPlan = new ExecPlan();\n\nexecPlan.add('ls -la');\nexecPlan.add('grep \"test\" ./*');\nexecPlan.add('ps -ef');\nexecPlan.execute();\n````\n\n````javascript\n/**\n * An example with more fine-grained control.\n */\n\nvar ExecPlan = require('exec-plan').ExecPlan;\nvar execPlan = new ExecPlan();\n\n// attach event handlers to the events exposed by ExecPlan\nexecPlan.on('execerror', function (error, stderr) {\n    console.log('an error happened in one of the steps in execution plan');\n    console.log(error);  // the error object for the process that caused the problem\n    console.log('the stderr for the process that caused the problem is ' + stderr);\n});\nexecPlan.on('complete', function (stdout) {\n    console.log('the entire execution plan finished, i.e., all child processes completed with no errors');\n    console.log('the stdout for the final step in the execution plan is ' + stdout);\n});\n\n// first, setup a vanilla set of commands\nexecPlan.add('ls -la');\nexecPlan.add('ps -ef');\n\n// now, add a command that will include some 'pre logic' that will run before the command is executed, \n// but after previous command in the execution plan finished.\nexecPlan.add(function (stdout) {\n    process.chdir('/tmp');  // run this logic before the command is executed\n}, 'grep \"test\" ./*');\n\n// now, add a command that will include an error handler that will run before the 'error' event is fired.\nexecPlan.add('some_command_that_does_not_exist', function (error, stderr) {\n    console.log('ERROR: ' + stderr);\n    console.log(error); // a standard js Error object\n    return false;  // return false to signal to execPlan that the 'error' event should not be fired\n});\n\n// run the set of commands\nexecPlan.execute();\n````\n\n````javascript\n/**\n * An example showing error-handling\n */\nvar ExecPlan = require('exec-plan').ExecPlan;\nvar execPlan = new ExecPlan({\n    autoPrintOut: true,    // stdout should be automatically printed when a command is executed\n    autoPrintErr: false,   // stderr should not be automatically printed to when a command has an error\n    continueOnError: true  // if an error occurs, the plan should continuing executing\n});\n\nexecPlan.on('finish', function () {\n    console.log('The execution plan has finished executing. An error may or may not have occurred.');\n});\n\nexecPlan.add('./command_that_does_not_exist', function (error, stderr) {\n    console.log('an error occurred with stderr: ', stderr);\n    // nothing is returned by this command, so the 'continueOnError' policy will be followed, and the\n    // the 'execerror' event will be fired\n});\nexecPlan.add('./another_command_that_does_not_exist', function (error, stderr) {\n    // return true to signal that the plan should continue executing irrespective of 'continueOnError' policy;\n    // also, a return of true or false signals that the 'execerror' event should not fire.\n    return true;\n});\nexecPlan.add('./yet_another_command_that_does_not_exist', function (error, stderr) {\n    // return false to signal that the plan should stop executing irrespective of 'continueOnError' policy;\n    // again, returning false signals that the 'execerror' event shoudl not fire.\n    return false;\n});\n\nexecPlan.execute();\n````\n\nExecPlan API\n------------\n\nConfiguration\n=============\n\n- The constructor takes a configuration object that dictates various behaviors of the ExecPlan. The config object has\n    the following properties:\n    - **[autoPrintOut]** Boolean <*default*: **true**>    - whether to automatically print to stdout when a command\n                                                            finishes while an execution plan is executing.\n    - **[autoPrintErr]** Boolean <*default*: **true**>    - whether to automatically print to stderr when a command\n                                                            has an error while an execution plan is executing.\n    - **[continueOnError]** Boolean <*default*: **true**> - whether to continue executing a plan if an error occurs in\n                                                            one of the the commands while the execution plan is executing.\n- Example Usage:\n<pre lang=\"javascript\"><code>\nvar ExecPlan = require('exec-plan').ExecPlan;\nvar execPlan = new ExecPlan({\n    autoPrintOut: false,  // don't automatically print stdout\n    autoPrintErr: true,   // allow stderr to be automatically printed to\n    continueOnError: true  // if an error occurs in a command in the execution plan, the plan should continue executing\n});\n</code></pre>\n\nEvents\n======\n\n- **'complete'**\n    - Fires when an entire execution plan's set of commands successfully execute.\n    - The following parameters will be given to the provided callback:\n        - **stdout** *String* - the stdout of the final command that successfully executed.\n    - Example usage:\n      ````javascript\n      var ExecPlan = require('exec-plan').ExecPlan;\n      var execPlan = new ExecPlan();\n\n      execPlan.on('complete', function (stdout) {\n          // provide code to do processing after all commands have successfully been executed.\n      });\n      ````\n- **'execerror'**\n    - Fires whenever a command in an execution plan has an error while the plan is being executed.\n    - The following parameters will be given to the provided callback:\n        - **error** *Error*   - the js Error object of the command that caused the problem.\n        - **stderr** *String* - the stderr of the command that caused the problem.\n    - Example usage:\n      ````javascript\n      var ExecPlan = require('exec-plan').ExecPlan;\n      var execPlan = new ExecPlan();\n\n      execPlan.on('execerror', function (error, stderr) {\n          // provide code to handle any command errors.\n      });\n      ````\n    - NOTE: Unfortunately, due to conflicts with the internals of node.js, this event cannot be named 'error'.\n- **'finish'**\n    - Fires after the conclusion of the execution of an execution plan, irrespective of whether an error occurred.\n    - The provided callback should expect no parameters.\n    - Example usage:\n      ````javascript\n      var ExecPlan = require('exec-plan').ExecPlan;\n      var execPlan = new ExecPlan();\n\n      execPlan.on('finish', function () {\n          // provide any code that should be called whenever an execution plan is stops executing.\n      });\n      ````\n\nPublic Actions\n==============\n\n- **add** - adds a 'step' command to the execution plan.\n    - The following parameters are expected:\n        - **[preLogic]** *Function*     - a function to call before the command is executed, but after previous\n                                          command finished.\n            - The preLogic function should expect the following parameters:\n                - **stdout** *String* - the stdout of the previously-executed step.\n        - **command** *String*          - command to be executed.\n        - **[options]** *Object*        - child_process.exec options. See: child_process.exec API.\n        - **[errorHandler]** *Function* - a function to call if the command produces an error.\n            - The errorHandler function should expect the following parameters:\n                - **error** *Error*   - js Error object that occurred during command execution.\n                - **stderr** *String* - the stderr of the command.\n            - The errorHandler function should return ```` false ```` if 'execerror' event should not be fired in\n              addition to this errorHandler.\n- **continuesOnError** - states whether the general policy of the exec plan is to continue when errors occur.\n    - **return** Boolean\n- **execute** - executes all added commands in the order in which they were added.\n    - This order will be enforced, such that each command will not execute until previous commands finish.\n- **willAutoPrintErr** - states whether stderr will be automatically printed to when errors occur.\n    - **return** Boolean\n- **willAutoPrintOut** - states whether stdout will be automatically printed to after a command executes.\n    - **return** Boolean\n\n\n",
  "readmeFilename": "README.md",
  "_id": "exec-plan@0.0.3",
  "description": "exec-plan - Run child process commands synchronously ====================================================",
  "dist": {
    "shasum": "d0d09d18b440cfdb153c4daa59a08970fad7a00d"
  },
  "_from": "exec-plan@",
  "_resolved": "https://registry.npmjs.org/exec-plan/-/exec-plan-0.0.3.tgz"
}
