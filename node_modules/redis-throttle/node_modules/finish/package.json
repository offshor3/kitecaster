{
  "name": "finish",
  "description": "Provide a single callback for multiple asynchronous calls; the callback is called when all asynchronous calls finish",
  "main": "./finish",
  "author": {
    "name": "Chaoran Yang",
    "email": "chaorany@me.com"
  },
  "version": "0.4.0",
  "repository": {
    "type": "git",
    "url": "http://github.com/chaoran/node-finish.git"
  },
  "bugs": {
    "url": "http://github.com/chaoran/node-finish/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/chaoran/node-finish/raw/master/LICENSE"
    }
  ],
  "keywords": [
    "finish",
    "async"
  ],
  "readme": "# Finish.js\n======\n\nFinish is a node utility module which provides a straight-forward syntax to express multiple asynchronous tasks with unified callback function.\n\n## Installation\nYou can install using Node Package Manager (npm):\n\n    npm install finish\n\n## Quick Examples\n```javascript\nvar finish = require(\"finish\");\nfinish(function(async) { \n  // Any asynchronous calls within this function will be captured\n  // Just wrap each asynchronous call with function 'async'\n  ['file1', 'file2', 'file3'].forEach(function(file) {\n    async(function(done) { \n      // Your async function should use 'done' as callback, or call 'done' in its callback\n      fs.readFile(file, done); \n    });\n  });\n}, function(err, results) {\n  // This callback is fired after all asynchronous calls finish or as soon as an error occurs\n  console.log(results[0]);console.log(results[1]);console.log(results[2]);\n});\n```\n\n## Callback: done\n\nEvery asynchronous function within finish should use 'done' as their callback, or call 'done' in their callback. It accepts three arguments: __error__, __result__, __key__.\n\nIf you omit the third argument: __key__, __result__ passed to 'done' are collected into an array: __results__ which is passed as an argument to the final callback. If you specify the third argument __key__, __result__ will be collected into an object; each with __key__ as its key. \n\nFor example,\n```javascript\nfinish(function(async) { \n  ['file1', 'file2', 'file3'].forEach(function(file) {\n    async(function(done) { \n      fs.lstat(file, function(err, stat) {\n        done(err, stat.size, file);\n      }); \n    });\n  });\n}, function(err, results) {\n  // results is an object, not an array\n  console.log(results)\n});\n```\n\n## Ordered results\nSometimes, you want to know the mapping between asynchronous tasks and results their produced.\n__Finish__ provides a version that guarantees results from each asynchronous task are collected in the order asynchronous tasks spawn. \n\n```javascript\n// a async function which does nothing useful\nfunction async_print(value, callback) {\n  process.nextTick(function() {\n    callback(null, value)\n  })\n}\n\nfinish.ordered(function(async) { \n  for (var i = 0; i< 99; ++i) {\n    async(function(done) { async_print(i, done) })\n  }\n}, function(err, results) {\n  console.log(results)\n  // output: [0, 1, 2, ..., 99]\n})\n```\n\n## Why not use Async.parallel?\n\n[Async.parallel](http://github.com/caolan/async#parallel) accepts an array of continuation functions and runs them in parallel. It also provides a callback function which is fired after all functions finish. \nFinish differs from async.parallel because it does not require user to pack asynchronous calls into an array to run them in parallel and track their completion. This gives you more flexibility and greatly reduce the lines of plateboiler code you need to write when using Async.parallel.\nMoreover, it increase parallelism, which gives you better performance.\n\n## Performance: finish vs. async.parallel\n\nExamples folder contains an example which calculates a size of a directory, implemented in both finish and async.parallel.\nHere's how they perform on my macbook:\n\n    $ time node size.js \n    /Users/chaorany: 118740.345 MB\n\n    real  0m14.965s\n    user  0m15.224s\n    sys 0m20.381s\n    \n    $ time node size-async.js \n    /Users/chaorany: 118738.366 MB\n\n    real  0m20.036s\n    user  0m20.080s\n    sys 0m20.458s\n\n(I don't know why returned size is different on my machine. It would be great if you can send me a message if you might know the reason...)\n\n",
  "readmeFilename": "README.md",
  "_id": "finish@0.4.0",
  "dist": {
    "shasum": "1509b23fb91057f88521d47b7cd188e5bc6fe5df"
  },
  "_from": "finish@*"
}
