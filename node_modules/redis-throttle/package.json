{
  "name": "redis-throttle",
  "version": "0.0.1",
  "description": "A Node.js module that helps with rate limiting",
  "main": "index.js",
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/chaoran/node-throttle.git"
  },
  "keywords": [
    "rate",
    "limiting",
    "throttle",
    "redis"
  ],
  "author": {
    "name": "Chaoran Yang"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "b36238030b5f28191b68cd15fdf6ee813e180df4",
  "dependencies": {
    "finish": "*",
    "redis": "*"
  },
  "readme": "node-throttle\n=============\n\nA Node.js module that helps with rate limiting.\n\nThe idea behind this module is originally by Chris O'Hara (http://chris6f.com/rate-limiting-with-redis). \nHowever, the algorithm he presented can cause false-positive throttling in certain cases.\n\nI adjusted O'Hara's algorithm in this module. This module do not yield false-positive throttling.\n\n## Install\nInstall via Node Package Manager (NPM):\n\n    npm install finish\n\n## Quick Example\n```javascript\nvar Throttle = require('throttle')\nThrottle.configure({\n  port: 6300,\n  host: 'localhost'\n})\n\nvar key = ip_address + ':' + url\nvar throttle = new Throttle(key, {\n  span: 15 * 60 * 1000, // 15 mins\n  accuracy: 60 * 1000   // accuracy 1 min\n})\n\nthrottle.increment(1, function(err, count) {\n  if (err) throw err;\n  var ip = throttle.key.split(':')[0]\n  var url = throttle.key.split(':')[1]\n  console.log('ip:', ip, 'has visited url:', url, count, 'times', \n    'in', throttle.span / 60 / 1000, 'mins')\n})\n```\n\n## APIs\n### Throttle.configure([options])\n\nIntialize the Redis client used by Throttle. \nOptions can include __port__, __host__ and other options accepted by [node_redis](http://github.com/mranney/node_redis).\nThis method should be called before any other methods after requiring the module.\n\n### new Throttle(key[, options])\n```\ndefault_options = {\n    span: 15 * 60 * 1000, // value should be in milliseconds.\n    accuracy: 60 * 1000   // value should be in milliseconds. ***NOTE: span should be divisible by accuracy***.\n}\n```\n\nCreate a new throttle instance. Throttle instances with the same key share the same internal status, e.g.\n```javascript\nvar th1 = new Throttle('key')\nvar th2 = new Throttle('key')\nth1.increment(1, function(err, count) { \n    assert.equal(count, 1)\n    th2.increment(1, function(err, count) {\n        assert.equal(count, 2)\n    })\n})\n```\n\nDifferent accuracies will result in different costs. The complexity of read/increment operation is O(n), where __n__ is __span__ / __accuracy__.\n\n### read(callback)\n\nRead value of a throttle instance, without increment it.\n```javascript\nthrottle.read(function(err, count) {\n    if (err) throw err\n    console.log('current count:', count)\n})\n```\n\n### increment(n, callback)\n\nIncrement value of a throttle instance by __n__. Returns the resulted value through callback function.\n```javascript\nthrottle.increment(1, function(err, count) {\n    if (err) throw err\n    console.log('value after increment: count')\n}\n```\n\n## LICENSE - MIT License\n\nCopyright (c) 2013 Chaoran Yang, charoany (AT) me (dot) com\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "redis-throttle@0.0.1",
  "dist": {
    "shasum": "1b74628b7658df41699cadf5b1e00ee4abadfa56"
  },
  "_from": "redis-throttle"
}
